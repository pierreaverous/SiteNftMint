{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pierr\\\\Documents\\\\SiteNftMint\\\\appnfts\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n// import { ethers } from 'ethers';\n// import SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\n// import './App.css';\n// import dataNft from './_metadata.json';\n//\n// const smartcontratAdress = '0x6C0F01619fE0303419cB6158Cc3639418E4DDaF0';\n// async function setCost(newCost) {\n//   if (typeof window.ethereum !== 'undefined') {\n//     try {\n//       const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//       const overrides = {\n//         from: accounts[0],\n//         gasLimit: 2900000,\n//       };\n//       const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\n//       await transaction.wait();\n//       fetchData();\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//   }\n// }\n//\n// function NFTCard({ nft, mintFunction, setPriceFunction }) {\n//   return (\n//       <div className=\"nft-card\">\n//         <h2>{nft.name}</h2>\n//         <img\n//             className=\"nftImage\"\n//             src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n//             alt={nft.name}\n//         />\n//         <button onClick={() => mintFunction(nft.edition)}>\n//           Mint NFT {nft.edition}\n//         </button>\n//         <form onSubmit={(e) => {\n//           e.preventDefault();\n//           setCost(e.target.cost.value);\n//         }}>\n//           <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\n//           <button type=\"submit\">Set cost</button>\n//         </form>\n//       </div>\n//   );\n// }\n//\n//\n// function App() {\n//   const [error, setError] = useState('');\n//   const [data, setData] = useState({});\n//   const [account, setAccount] = useState([]);\n//   const [nftData, setNftData] = useState([]);\n//\n//   useEffect(() => {\n//     fetchData();\n//     getAccounts();\n//     setNftData(dataNft);\n//   }, []);\n//\n//   async function getAccounts() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         setAccount(accounts);\n//         console.log(accounts[0]);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function fetchData() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n//       try {\n//         const cost = await contract.cost();\n//         const totalSupply = await contract.totalSupply();\n//         const object = {cost: String(cost), totalSupply: String(totalSupply)};\n//         setData(object);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function mint(edition) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const overrides = {\n//           from: accounts[0],\n//           value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n//           gasLimit: 9900000,\n//         };\n//         const transaction = await contract.mint(accounts[0], edition, overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//   async function setNftPrice(nftId, price) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//\n//         // Ajoutez cette v√©rification\n//         const contractOwner = await contract.owner();\n//         if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n//           throw new Error(\"Only the contract owner can set the NFT price.\");\n//         }\n//\n//         const overrides = {\n//           from: accounts[0],\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   async function withdraw() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const transaction = await contract.withdraw();\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   return (\n//       <div className=\"App\">\n//         {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n//             <button className=\"withdraw\" onClick={withdraw}>\n//               Withdraw\n//             </button>\n//         )}\n//         <div className=\"container\">\n//           <div className=\"nft-gallery\">\n//             {nftData.map((nft) => (\n//                 <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n//\n//             ))}\n//           </div>\n//           {error && <p>{error}</p>}\n//           <h1>Mint a Jox NFT</h1>\n//           <p className=\"count\">\n//             {data.totalSupply}/{data.maxSupply}\n//           </p>\n//           <p className=\"cost\">\n//             Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n//           </p>\n//         </div>\n//       </div>\n//   );\n// }\n// export default App;\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst smartcontratAdress = '0x0C55A430BC48f55593a253B1B70B0810268acA51';\nconst setCost = async (newCost, fetchData, setError) => {\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n      const overrides = {\n        from: accounts[0],\n        gasLimit: 2900000\n      };\n      const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\n      await transaction.wait();\n      fetchData();\n    } catch (err) {\n      setError(err.message);\n    }\n  }\n};\nconst NFTCard = _ref => {\n  let {\n    nft,\n    mintFunction,\n    setPriceFunction,\n    fetchData,\n    setError\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: nft.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"nftImage\",\n      src: nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\"),\n      alt: nft.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => mintFunction(nft.edition),\n      children: [\"Mint NFT \", nft.edition]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        setCost(e.target.cost.value, fetchData, setError);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        name: \"cost\",\n        placeholder: \"New cost\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Set cost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        setPriceFunction(nft.edition, e.target.price.value, fetchData, setError);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        name: \"price\",\n        placeholder: \"New NFT price\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Set NFT price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 7\n  }, this);\n};\n_c = NFTCard;\nconst App = () => {\n  _s();\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n  const getAccounts = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts);\n        console.log(accounts[0]);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n  const fetchData = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {\n          cost: String(cost),\n          totalSupply: String(totalSupply)\n        };\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n  async function mint(edition) {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n          gasLimit: 9900000\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function setNftPrice(edition, price, fetchData, setError) {\n    // console.log(edition)\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000\n        };\n        if (!Number.isInteger(edition) || edition <= 0) {\n          throw new Error(\"NFT ID must be a positive integer greater than 0.\");\n        }\n        const transaction = await contract.setNftPrice(edition, ethers.utils.parseEther(price), overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"withdraw\",\n      onClick: withdraw,\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery\",\n        children: nftData.map(nft => /*#__PURE__*/_jsxDEV(NFTCard, {\n          nft: nft,\n          mintFunction: mint,\n          setPriceFunction: setNftPrice,\n          fetchData: fetchData,\n          setError: setError\n        }, nft.edition, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mint a Jox NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"count\",\n        children: [data.totalSupply, \"/\", data.maxSupply]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cost\",\n        children: [\"Jox Collection NFT cost \", Number(data.cost) / 10 ** 18, \" ETH (excluding gas fees)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 373,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"2BGA2Z5gzNji+rNAX3sMIQu9KMI=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"NFTCard\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","SmartContrat","dataNft","jsxDEV","_jsxDEV","smartcontratAdress","setCost","newCost","fetchData","setError","window","ethereum","accounts","request","method","provider","providers","Web3Provider","signer","getSigner","contract","Contract","abi","overrides","from","gasLimit","transaction","utils","parseEther","wait","err","message","NFTCard","_ref","nft","mintFunction","setPriceFunction","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","src","image","replace","alt","onClick","edition","onSubmit","e","preventDefault","target","cost","value","type","step","placeholder","required","price","_c","App","_s","error","data","setData","account","setAccount","nftData","setNftData","getAccounts","console","log","totalSupply","object","String","mint","Number","setNftPrice","contractOwner","owner","toLowerCase","Error","isInteger","withdraw","map","maxSupply","_c2","$RefreshReg$"],"sources":["C:/Users/pierr/Documents/SiteNftMint/appnfts/src/App.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\n// import { ethers } from 'ethers';\n// import SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\n// import './App.css';\n// import dataNft from './_metadata.json';\n//\n// const smartcontratAdress = '0x6C0F01619fE0303419cB6158Cc3639418E4DDaF0';\n// async function setCost(newCost) {\n//   if (typeof window.ethereum !== 'undefined') {\n//     try {\n//       const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//       const overrides = {\n//         from: accounts[0],\n//         gasLimit: 2900000,\n//       };\n//       const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\n//       await transaction.wait();\n//       fetchData();\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//   }\n// }\n//\n// function NFTCard({ nft, mintFunction, setPriceFunction }) {\n//   return (\n//       <div className=\"nft-card\">\n//         <h2>{nft.name}</h2>\n//         <img\n//             className=\"nftImage\"\n//             src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n//             alt={nft.name}\n//         />\n//         <button onClick={() => mintFunction(nft.edition)}>\n//           Mint NFT {nft.edition}\n//         </button>\n//         <form onSubmit={(e) => {\n//           e.preventDefault();\n//           setCost(e.target.cost.value);\n//         }}>\n//           <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\n//           <button type=\"submit\">Set cost</button>\n//         </form>\n//       </div>\n//   );\n// }\n//\n//\n// function App() {\n//   const [error, setError] = useState('');\n//   const [data, setData] = useState({});\n//   const [account, setAccount] = useState([]);\n//   const [nftData, setNftData] = useState([]);\n//\n//   useEffect(() => {\n//     fetchData();\n//     getAccounts();\n//     setNftData(dataNft);\n//   }, []);\n//\n//   async function getAccounts() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         setAccount(accounts);\n//         console.log(accounts[0]);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function fetchData() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n//       try {\n//         const cost = await contract.cost();\n//         const totalSupply = await contract.totalSupply();\n//         const object = {cost: String(cost), totalSupply: String(totalSupply)};\n//         setData(object);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function mint(edition) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const overrides = {\n//           from: accounts[0],\n//           value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n//           gasLimit: 9900000,\n//         };\n//         const transaction = await contract.mint(accounts[0], edition, overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//   async function setNftPrice(nftId, price) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//\n//         // Ajoutez cette v√©rification\n//         const contractOwner = await contract.owner();\n//         if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n//           throw new Error(\"Only the contract owner can set the NFT price.\");\n//         }\n//\n//         const overrides = {\n//           from: accounts[0],\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   async function withdraw() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const transaction = await contract.withdraw();\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   return (\n//       <div className=\"App\">\n//         {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n//             <button className=\"withdraw\" onClick={withdraw}>\n//               Withdraw\n//             </button>\n//         )}\n//         <div className=\"container\">\n//           <div className=\"nft-gallery\">\n//             {nftData.map((nft) => (\n//                 <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n//\n//             ))}\n//           </div>\n//           {error && <p>{error}</p>}\n//           <h1>Mint a Jox NFT</h1>\n//           <p className=\"count\">\n//             {data.totalSupply}/{data.maxSupply}\n//           </p>\n//           <p className=\"cost\">\n//             Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n//           </p>\n//         </div>\n//       </div>\n//   );\n// }\n// export default App;\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\n\nconst smartcontratAdress = '0x0C55A430BC48f55593a253B1B70B0810268acA51';\n\nconst setCost = async (newCost, fetchData, setError) => {\n  if (typeof window.ethereum !== 'undefined') {\n    try {\n      const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n      const overrides = {\n        from: accounts[0],\n        gasLimit: 2900000,\n      };\n      const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\n      await transaction.wait();\n      fetchData();\n    } catch (err) {\n      setError(err.message);\n    }\n  }\n};\n\nconst NFTCard = ({ nft, mintFunction, setPriceFunction, fetchData, setError }) => {\n\n  return (\n      <div className=\"nft-card\">\n        <h2>{nft.name}</h2>\n        <img\n            className=\"nftImage\"\n            src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n            alt={nft.name}\n        />\n        <button onClick={() => mintFunction(nft.edition)}>\n          Mint NFT {nft.edition}\n        </button>\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          setCost(e.target.cost.value, fetchData, setError);\n        }}>\n          <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\n          <button type=\"submit\">Set cost</button>\n        </form>\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          setPriceFunction(nft.edition, e.target.price.value, fetchData, setError);\n        }}>\n          <input type=\"number\" step=\"0.01\" name=\"price\" placeholder=\"New NFT price\" required />\n          <button type=\"submit\">Set NFT price</button>\n        </form>\n\n      </div>\n  );\n};\n\nconst App = () => {\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n\n  const getAccounts = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        setAccount(accounts);\n        console.log(accounts[0]);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n\n  const fetchData = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {cost: String(cost), totalSupply: String(totalSupply)};\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n\n  async function mint(edition) {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n            smartcontratAdress,\n            SmartContrat.abi,\n            signer\n        );\n\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(\n              String(Number(data.cost) / 10 ** 18)\n          ),\n          gasLimit: 9900000,\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function setNftPrice(edition, price, fetchData, setError) {\n    // console.log(edition)\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n            smartcontratAdress,\n            SmartContrat.abi,\n            signer\n        );\n\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000,\n        };\n        if (!Number.isInteger(edition) || edition <= 0) {\n          throw new Error(\"NFT ID must be a positive integer greater than 0.\");\n        }\n\n        const transaction = await contract.setNftPrice(\n            edition,\n            ethers.utils.parseEther(price),\n            overrides\n        );\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  return (\n\n      <div className=\"App\">\n        {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n            <button className=\"withdraw\" onClick={withdraw}>\n              Withdraw\n            </button>\n        )}\n        <div className=\"container\">\n          <div className=\"nft-gallery\">\n            {nftData.map((nft) => (\n                <NFTCard key={nft.edition}\n                         nft={nft}\n                         mintFunction={mint}\n                         setPriceFunction={setNftPrice}\n                         fetchData={fetchData}\n                         setError={setError}/>\n            ))}\n          </div>\n          {error && <p>{error}</p>}\n          <h1>Mint a Jox NFT</h1>\n          <p className=\"count\">\n            {data.totalSupply}/{data.maxSupply}\n          </p>\n          <p className=\"cost\">\n            Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n          </p>\n        </div>\n      </div>\n  );\n}\nexport default App;\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}