{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pierr\\\\Documents\\\\Nfts\\\\appnfts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n// import { ethers } from 'ethers';\n// import SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\n// import './App.css';\n// import dataNft from './_metadata.json';\n//\n// const smartcontratAdress = '0xb8Fa16FDf693818a6A57656780983588dF1C779a';\n// function SetPriceForm({ nftId, setPriceFunction }) {\n//   const [price, setPrice] = useState(0);\n//\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setPriceFunction(nftId, price);\n//   };\n//\n//   return (\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Set price (in ETH):\n//           <input\n//               type=\"number\"\n//               step=\"0.01\"\n//               min=\"0\"\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//           />\n//         </label>\n//         <button type=\"submit\">Set Price</button>\n//       </form>\n//   );\n// }\n//\n// function NFTCard({ nft, mintFunction, setPriceFunction }) {\n//   return (\n//       <div className=\"nft-card\">\n//         <h2>{nft.name}</h2>\n//         <img\n//             className=\"nftImage\"\n//             src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n//             alt={nft.name}\n//         />\n//         <button onClick={() => mintFunction(nft.edition)}>\n//           Mint NFT {nft.edition}\n//         </button>\n//         <SetPriceForm nftId={nft.edition} setPriceFunction={setPriceFunction} />\n//       </div>\n//   );\n// }\n//\n//\n// function App() {\n//   const [error, setError] = useState('');\n//   const [data, setData] = useState({});\n//   const [account, setAccount] = useState([]);\n//   const [nftData, setNftData] = useState([]);\n//\n//   useEffect(() => {\n//     fetchData();\n//     getAccounts();\n//     setNftData(dataNft);\n//   }, []);\n//\n//   async function getAccounts() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         setAccount(accounts);\n//         console.log(accounts[0]);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function fetchData() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n//       try {\n//         const cost = await contract.cost();\n//         const totalSupply = await contract.totalSupply();\n//         const object = {cost: String(cost), totalSupply: String(totalSupply)};\n//         setData(object);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function mint(edition) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const overrides = {\n//           from: accounts[0],\n//           value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.mint(accounts[0], edition, overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//   async function setNftPrice(nftId, price) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//\n//         // Ajoutez cette v√©rification\n//         const contractOwner = await contract.owner();\n//         if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n//           throw new Error(\"Only the contract owner can set the NFT price.\");\n//         }\n//\n//         const overrides = {\n//           from: accounts[0],\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   async function withdraw() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const transaction = await contract.withdraw();\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   return (\n//       <div className=\"App\">\n//         {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n//             <button className=\"withdraw\" onClick={withdraw}>\n//               Withdraw\n//             </button>\n//         )}\n//         <div className=\"container\">\n//           <div className=\"nft-gallery\">\n//             {nftData.map((nft) => (\n//                 <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n//             ))}\n//           </div>\n//           {error && <p>{error}</p>}\n//           <h1>Mint a Jox NFT</h1>\n//           <p className=\"count\">\n//             {data.totalSupply}/{data.maxSupply}\n//           </p>\n//           <p className=\"cost\">\n//             Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n//           </p>\n//         </div>\n//       </div>\n//   );\n// }\n//   export default App;\n//\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst smartcontratAdress = '0xb8Fa16FDf693818a6A57656780983588dF1C779a';\nfunction SetPriceForm(_ref) {\n  _s();\n  let {\n    nftId,\n    setPriceFunction\n  } = _ref;\n  const [price, setPrice] = useState(0);\n  const handleSubmit = e => {\n    e.preventDefault();\n    setPriceFunction(nftId, price);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Set price (in ETH):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        min: \"0\",\n        value: price,\n        onChange: e => setPrice(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Set Price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 7\n  }, this);\n}\n_s(SetPriceForm, \"+QVXHEEfqh9dTGOqNCLRXy2UMcU=\");\n_c = SetPriceForm;\nfunction NFTCard(_ref2) {\n  let {\n    nft,\n    mintFunction,\n    setPriceFunction\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: nft.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"nftImage\",\n      src: nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\"),\n      alt: nft.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => mintFunction(nft.edition),\n      children: [\"Mint NFT \", nft.edition]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SetPriceForm, {\n      nftId: nft.edition,\n      setPriceFunction: setPriceFunction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 7\n  }, this);\n}\n_c2 = NFTCard;\nfunction App() {\n  _s2();\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n  async function getAccounts() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function fetchData() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {\n          cost: String(cost),\n          totalSupply: String(totalSupply)\n        };\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function mint(edition) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(String(nftPrices[edition] / 10 ** 18)),\n          gasLimit: 2900000\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function setNftPrice(nftId, price) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000\n        };\n        const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  function NFTCard(_ref3) {\n    let {\n      nft,\n      mintFunction,\n      setPriceFunction\n    } = _ref3;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nft-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: nft.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"nftImage\",\n        src: nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\"),\n        alt: nft.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => mintFunction(nft.edition),\n        children: [\"Mint NFT \", nft.edition]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this), nftPrices[nft.edition] > 0 && /*#__PURE__*/_jsxDEV(SetPriceForm, {\n        nftId: nft.edition,\n        setPriceFunction: setPriceFunction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }, this);\n  }\n}\n_s2(App, \"2BGA2Z5gzNji+rNAX3sMIQu9KMI=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SetPriceForm\");\n$RefreshReg$(_c2, \"NFTCard\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","SmartContrat","dataNft","jsxDEV","_jsxDEV","smartcontratAdress","SetPriceForm","_ref","_s","nftId","setPriceFunction","price","setPrice","handleSubmit","e","preventDefault","onSubmit","children","type","step","min","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","NFTCard","_ref2","nft","mintFunction","className","name","src","image","replace","alt","onClick","edition","_c2","App","_s2","error","setError","data","setData","account","setAccount","nftData","setNftData","fetchData","getAccounts","window","ethereum","accounts","request","method","err","message","provider","providers","Web3Provider","contract","Contract","abi","cost","totalSupply","object","String","mint","signer","getSigner","overrides","from","utils","parseEther","nftPrices","gasLimit","transaction","wait","setNftPrice","contractOwner","owner","toLowerCase","Error","withdraw","_ref3","_c3","$RefreshReg$"],"sources":["C:/Users/pierr/Documents/Nfts/appnfts/src/App.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\n// import { ethers } from 'ethers';\n// import SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\n// import './App.css';\n// import dataNft from './_metadata.json';\n//\n// const smartcontratAdress = '0xb8Fa16FDf693818a6A57656780983588dF1C779a';\n// function SetPriceForm({ nftId, setPriceFunction }) {\n//   const [price, setPrice] = useState(0);\n//\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setPriceFunction(nftId, price);\n//   };\n//\n//   return (\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Set price (in ETH):\n//           <input\n//               type=\"number\"\n//               step=\"0.01\"\n//               min=\"0\"\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//           />\n//         </label>\n//         <button type=\"submit\">Set Price</button>\n//       </form>\n//   );\n// }\n//\n// function NFTCard({ nft, mintFunction, setPriceFunction }) {\n//   return (\n//       <div className=\"nft-card\">\n//         <h2>{nft.name}</h2>\n//         <img\n//             className=\"nftImage\"\n//             src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n//             alt={nft.name}\n//         />\n//         <button onClick={() => mintFunction(nft.edition)}>\n//           Mint NFT {nft.edition}\n//         </button>\n//         <SetPriceForm nftId={nft.edition} setPriceFunction={setPriceFunction} />\n//       </div>\n//   );\n// }\n//\n//\n// function App() {\n//   const [error, setError] = useState('');\n//   const [data, setData] = useState({});\n//   const [account, setAccount] = useState([]);\n//   const [nftData, setNftData] = useState([]);\n//\n//   useEffect(() => {\n//     fetchData();\n//     getAccounts();\n//     setNftData(dataNft);\n//   }, []);\n//\n//   async function getAccounts() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         setAccount(accounts);\n//         console.log(accounts[0]);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function fetchData() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n//       try {\n//         const cost = await contract.cost();\n//         const totalSupply = await contract.totalSupply();\n//         const object = {cost: String(cost), totalSupply: String(totalSupply)};\n//         setData(object);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function mint(edition) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const overrides = {\n//           from: accounts[0],\n//           value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.mint(accounts[0], edition, overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//   async function setNftPrice(nftId, price) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//\n//         // Ajoutez cette v√©rification\n//         const contractOwner = await contract.owner();\n//         if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n//           throw new Error(\"Only the contract owner can set the NFT price.\");\n//         }\n//\n//         const overrides = {\n//           from: accounts[0],\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   async function withdraw() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const transaction = await contract.withdraw();\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   return (\n//       <div className=\"App\">\n//         {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n//             <button className=\"withdraw\" onClick={withdraw}>\n//               Withdraw\n//             </button>\n//         )}\n//         <div className=\"container\">\n//           <div className=\"nft-gallery\">\n//             {nftData.map((nft) => (\n//                 <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n//             ))}\n//           </div>\n//           {error && <p>{error}</p>}\n//           <h1>Mint a Jox NFT</h1>\n//           <p className=\"count\">\n//             {data.totalSupply}/{data.maxSupply}\n//           </p>\n//           <p className=\"cost\">\n//             Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n//           </p>\n//         </div>\n//       </div>\n//   );\n// }\n//   export default App;\n//\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\n\nconst smartcontratAdress = '0xb8Fa16FDf693818a6A57656780983588dF1C779a';\n\nfunction SetPriceForm({ nftId, setPriceFunction }) {\n  const [price, setPrice] = useState(0);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setPriceFunction(nftId, price);\n  };\n\n  return (\n      <form onSubmit={handleSubmit}>\n        <label>\n          Set price (in ETH):\n          <input\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Set Price</button>\n      </form>\n  );\n}\n\nfunction NFTCard({ nft, mintFunction, setPriceFunction }) {\n  return (\n      <div className=\"nft-card\">\n        <h2>{nft.name}</h2>\n        <img\n            className=\"nftImage\"\n            src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n            alt={nft.name}\n        />\n        <button onClick={() => mintFunction(nft.edition)}>\n          Mint NFT {nft.edition}\n        </button>\n        <SetPriceForm nftId={nft.edition} setPriceFunction={setPriceFunction} />\n      </div>\n  );\n}\n\nfunction App() {\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n\n  async function getAccounts() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        setAccount(accounts);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function fetchData() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {cost: String(cost), totalSupply: String(totalSupply)};\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function mint(edition) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(String(nftPrices[edition] / 10 ** 18)),\n          gasLimit: 2900000,\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function setNftPrice(nftId, price) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000,\n        };\n        const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  function NFTCard({nft, mintFunction, setPriceFunction}) {\n    return (\n        <div className=\"nft-card\">\n          <h2>{nft.name}</h2>\n          <img\n              className=\"nftImage\"\n              src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n              alt={nft.name}\n          />\n          <button onClick={() => mintFunction(nft.edition)}>\n            Mint NFT {nft.edition}\n          </button>\n          {nftPrices[nft.edition] > 0 && (\n              <SetPriceForm nftId={nft.edition} setPriceFunction={setPriceFunction}/>\n          )}\n        </div>\n    );\n  }\n}\nexport default App;\n\n"],"mappingsnF,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,kBAAkB,GAAG,4CAA4C;AAEvE,SAASC,YAAYA,CAAAC,IAAA,EAA8B;EAAAC,EAAA;EAAA,IAA7B;IAAEC,KAAK;IAAEC;EAAiB,CAAC,GAAAH,IAAA;EAC/C,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAErC,MAAMc,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClBL,gBAAgB,CAACD,KAAK,EAAEE,KAAK,CAAC;EAChC,CAAC;EAED,oBACIP,OAAA;IAAMY,QAAQ,EAAEH,YAAa;IAAAI,QAAA,gBAC3Bb,OAAA;MAAAa,QAAA,GAAO,qBAEL,eAAAb,OAAA;QACIc,IAAI,EAAC,QAAQ;QACbC,IAAI,EAAC,MAAM;QACXC,GAAG,EAAC,GAAG;QACPC,KAAK,EAAEV,KAAM;QACbW,QAAQ,EAAGR,CAAC,IAAKF,QAAQ,CAACE,CAAC,CAACS,MAAM,CAACF,KAAK;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC5C;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACI,eACRvB,OAAA;MAAQc,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACnC;AAEb;AAACnB,EAAA,CAvBQF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAyBrB,SAASuB,OAAOA,CAAAC,KAAA,EAA0C;EAAA,IAAzC;IAAEC,GAAG;IAAEC,YAAY;IAAEtB;EAAiB,CAAC,GAAAoB,KAAA;EACtD,oBACI1B,OAAA;IAAK6B,SAAS,EAAC,UAAU;IAAAhB,QAAA,gBACvBb,OAAA;MAAAa,QAAA,EAAKc,GAAG,CAACG;IAAI;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACnBvB,OAAA;MACI6B,SAAS,EAAC,UAAU;MACpBE,GAAG,EAAEJ,GAAG,CAACK,KAAK,CAACC,OAAO,CAAC,SAAS,EAAE,uBAAuB,CAAE;MAC3DC,GAAG,EAAEP,GAAG,CAACG;IAAK;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAChB,eACFvB,OAAA;MAAQmC,OAAO,EAAEA,CAAA,KAAMP,YAAY,CAACD,GAAG,CAACS,OAAO,CAAE;MAAAvB,QAAA,GAAC,WACvC,EAACc,GAAG,CAACS,OAAO;IAAA;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACd,eACTvB,OAAA,CAACE,YAAY;MAACG,KAAK,EAAEsB,GAAG,CAACS,OAAQ;MAAC9B,gBAAgB,EAAEA;IAAiB;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACpE;AAEZ;AAACc,GAAA,GAfQZ,OAAO;AAiBhB,SAASa,GAAGA,CAAA,EAAG;EAAAC,GAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC+C,IAAI,EAAEC,OAAO,CAAC,GAAGhD,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACiD,OAAO,EAAEC,UAAU,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmD,OAAO,EAAEC,UAAU,CAAC,GAAGpD,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACdsD,SAAS,EAAE;IACXC,WAAW,EAAE;IACbF,UAAU,CAACjD,OAAO,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,eAAemD,WAAWA,CAAA,EAAG;IAC3B,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAACC,MAAM,EAAE;QAAqB,CAAC,CAAC;QAC/ET,UAAU,CAACO,QAAQ,CAAC;MACtB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;MACvB;IACF;EACF;EAEA,eAAeR,SAASA,CAAA,EAAG;IACzB,IAAI,OAAOE,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,MAAMM,QAAQ,GAAG,IAAI7D,MAAM,CAAC8D,SAAS,CAACC,YAAY,CAACT,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMS,QAAQ,GAAG,IAAIhE,MAAM,CAACiE,QAAQ,CAAC5D,kBAAkB,EAAEJ,YAAY,CAACiE,GAAG,EAAEL,QAAQ,CAAC;MACpF,IAAI;QACF,MAAMM,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,EAAE;QAClC,MAAMC,WAAW,GAAG,MAAMJ,QAAQ,CAACI,WAAW,EAAE;QAChD,MAAMC,MAAM,GAAG;UAACF,IAAI,EAAEG,MAAM,CAACH,IAAI,CAAC;UAAEC,WAAW,EAAEE,MAAM,CAACF,WAAW;QAAC,CAAC;QACrErB,OAAO,CAACsB,MAAM,CAAC;MACjB,CAAC,CAAC,OAAOV,GAAG,EAAE;QACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;MACvB;IACF;EACF;EAEA,eAAeW,IAAIA,CAAC/B,OAAO,EAAE;IAC3B,IAAI,OAAOc,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAACC,MAAM,EAAE;QAAqB,CAAC,CAAC;QAC/E,MAAMG,QAAQ,GAAG,IAAI7D,MAAM,CAAC8D,SAAS,CAACC,YAAY,CAACT,MAAM,CAACC,QAAQ,CAAC;QACnE,MAAMiB,MAAM,GAAGX,QAAQ,CAACY,SAAS,EAAE;QACnC,MAAMT,QAAQ,GAAG,IAAIhE,MAAM,CAACiE,QAAQ,CAAC5D,kBAAkB,EAAEJ,YAAY,CAACiE,GAAG,EAAEM,MAAM,CAAC;QAElF,MAAME,SAAS,GAAG;UAChBC,IAAI,EAAEnB,QAAQ,CAAC,CAAC,CAAC;UACjBnC,KAAK,EAAErB,MAAM,CAAC4E,KAAK,CAACC,UAAU,CAACP,MAAM,CAACQ,SAAS,CAACtC,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;UACrEuC,QAAQ,EAAE;QACZ,CAAC;QACD,MAAMC,WAAW,GAAG,MAAMhB,QAAQ,CAACO,IAAI,CAACf,QAAQ,CAAC,CAAC,CAAC,EAAEhB,OAAO,EAAEkC,SAAS,CAAC;QACxE,MAAMM,WAAW,CAACC,IAAI,EAAE;QACxB7B,SAAS,EAAE;MACb,CAAC,CAAC,OAAOO,GAAG,EAAE;QACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;MACvB;IACF;EACF;EAEA,eAAesB,WAAWA,CAACzE,KAAK,EAAEE,KAAK,EAAE;IACvC,IAAI,OAAO2C,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAACC,MAAM,EAAE;QAAqB,CAAC,CAAC;QAC/E,MAAMG,QAAQ,GAAG,IAAI7D,MAAM,CAAC8D,SAAS,CAACC,YAAY,CAACT,MAAM,CAACC,QAAQ,CAAC;QACnE,MAAMiB,MAAM,GAAGX,QAAQ,CAACY,SAAS,EAAE;QACnC,MAAMT,QAAQ,GAAG,IAAIhE,MAAM,CAACiE,QAAQ,CAAC5D,kBAAkB,EAAEJ,YAAY,CAACiE,GAAG,EAAEM,MAAM,CAAC;QAElF,MAAMW,aAAa,GAAG,MAAMnB,QAAQ,CAACoB,KAAK,EAAE;QAC5C,IAAI5B,QAAQ,CAAC,CAAC,CAAC,CAAC6B,WAAW,EAAE,KAAKF,aAAa,CAACE,WAAW,EAAE,EAAE;UAC7D,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;QACnE;QAEA,MAAMZ,SAAS,GAAG;UAChBC,IAAI,EAAEnB,QAAQ,CAAC,CAAC,CAAC;UACjBuB,QAAQ,EAAE;QACZ,CAAC;QACD,MAAMC,WAAW,GAAG,MAAMhB,QAAQ,CAACkB,WAAW,CAACzE,KAAK,EAAET,MAAM,CAAC4E,KAAK,CAACC,UAAU,CAAClE,KAAK,CAAC,EAAE+D,SAAS,CAAC;QAChG,MAAMM,WAAW,CAACC,IAAI,EAAE;QACxB7B,SAAS,EAAE;MACb,CAAC,CAAC,OAAOO,GAAG,EAAE;QACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;MACvB;IACF;EACF;EAEA,eAAe2B,QAAQA,CAAA,EAAG;IACxB,IAAI,OAAOjC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MAC1C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAACC,MAAM,EAAE;QAAqB,CAAC,CAAC;QAC/E,MAAMG,QAAQ,GAAG,IAAI7D,MAAM,CAAC8D,SAAS,CAACC,YAAY,CAACT,MAAM,CAACC,QAAQ,CAAC;QACnE,MAAMiB,MAAM,GAAGX,QAAQ,CAACY,SAAS,EAAE;QACnC,MAAMT,QAAQ,GAAG,IAAIhE,MAAM,CAACiE,QAAQ,CAAC5D,kBAAkB,EAAEJ,YAAY,CAACiE,GAAG,EAAEM,MAAM,CAAC;QAClF,MAAMQ,WAAW,GAAG,MAAMhB,QAAQ,CAACuB,QAAQ,EAAE;QAC7C,MAAMP,WAAW,CAACC,IAAI,EAAE;QACxB7B,SAAS,EAAE;MACb,CAAC,CAAC,OAAOO,GAAG,EAAE;QACZd,QAAQ,CAACc,GAAG,CAACC,OAAO,CAAC;MACvB;IACF;EACF;EAEA,SAAS/B,OAAOA,CAAA2D,KAAA,EAAwC;IAAA,IAAvC;MAACzD,GAAG;MAAEC,YAAY;MAAEtB;IAAgB,CAAC,GAAA8E,KAAA;IACpD,oBACIpF,OAAA;MAAK6B,SAAS,EAAC,UAAU;MAAAhB,QAAA,gBACvBb,OAAA;QAAAa,QAAA,EAAKc,GAAG,CAACG;MAAI;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACnBvB,OAAA;QACI6B,SAAS,EAAC,UAAU;QACpBE,GAAG,EAAEJ,GAAG,CAACK,KAAK,CAACC,OAAO,CAAC,SAAS,EAAE,uBAAuB,CAAE;QAC3DC,GAAG,EAAEP,GAAG,CAACG;MAAK;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAChB,eACFvB,OAAA;QAAQmC,OAAO,EAAEA,CAAA,KAAMP,YAAY,CAACD,GAAG,CAACS,OAAO,CAAE;QAAAvB,QAAA,GAAC,WACvC,EAACc,GAAG,CAACS,OAAO;MAAA;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACd,EACRmD,SAAS,CAAC/C,GAAG,CAACS,OAAO,CAAC,GAAG,CAAC,iBACvBpC,OAAA,CAACE,YAAY;QAACG,KAAK,EAAEsB,GAAG,CAACS,OAAQ;QAAC9B,gBAAgB,EAAEA;MAAiB;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACxE;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACG;EAEZ;AACF;AAACgB,GAAA,CAxHQD,GAAG;AAAA+C,GAAA,GAAH/C,GAAG;AAyHZ,eAAeA,GAAG;AAAC,IAAAd,EAAA,EAAAa,GAAA,EAAAgD,GAAA;AAAAC,YAAA,CAAA9D,EAAA;AAAA8D,YAAA,CAAAjD,GAAA;AAAAiD,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}