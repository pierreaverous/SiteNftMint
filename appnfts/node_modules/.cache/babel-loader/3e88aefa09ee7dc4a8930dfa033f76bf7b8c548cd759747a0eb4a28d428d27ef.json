{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pierr\\\\Documents\\\\SiteNftMint\\\\appnfts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst smartcontratAdress = '0x264f6dCaBCB0d510613b11Df4ab22ab76b25DFa3';\nconst nftId = 15; // L'identifiant du NFT dont vous voulez récupérer le prix\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\nconst nftPrice = await contract.getNftPrice(nftId);\nconsole.log(\"NFT price:\", ethers.utils.formatEther(nftPrice));\n// function SetPriceForm({ nftId, setPriceFunction }) {\n//   const [price, setPrice] = useState(0);\n//\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setPriceFunction(nftId, price);\n//   };\n//\n//   return (\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Set price (in ETH):\n//           <input\n//               type=\"number\"\n//               step=\"0.01\"\n//               min=\"0\"\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//           />\n//         </label>\n//         <button type=\"submit\">Set Price</button>\n//       </form>\n//   );\n// }\nfunction SetPriceForm(_ref) {\n  _s();\n  let {\n    nftId,\n    setPriceFunction\n  } = _ref;\n  const [price, setPrice] = useState(0);\n  const handleSubmit = e => {\n    e.preventDefault();\n    setPriceFunction(nftId, price.toString());\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Set price (in ETH):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        min: \"0\",\n        value: price,\n        onChange: e => setPrice(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Set Price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}\n_s(SetPriceForm, \"+QVXHEEfqh9dTGOqNCLRXy2UMcU=\");\n_c = SetPriceForm;\nfunction NFTCard(_ref2) {\n  let {\n    nft,\n    mintFunction,\n    setPriceFunction\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"nft-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: nft.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"nftImage\",\n      src: nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\"),\n      alt: nft.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => mintFunction(nft.edition),\n      children: [\"Mint NFT \", nft.edition]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SetPriceForm, {\n      nftId: nft.edition,\n      setPriceFunction: setPriceFunction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setPriceFunction(nft.edition, \"0.05\"),\n      children: \"Set price to 0.05 ETH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n}\n_c2 = NFTCard;\nfunction App() {\n  _s2();\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n  async function getAccounts() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts);\n        console.log(accounts[0]);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function fetchData() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {\n          cost: String(cost),\n          totalSupply: String(totalSupply)\n        };\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function mint(edition) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n          gasLimit: 9900000\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  // async function setNftPrice(nftId, price) {\n  //   if (typeof window.ethereum !== 'undefined') {\n  //     try {\n  //       const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  //       const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //       const signer = provider.getSigner();\n  //       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n  //\n  //       // Ajoutez cette vérification\n  //       const contractOwner = await contract.owner();\n  //       if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n  //         throw new Error(\"Only the contract owner can set the NFT price.\");\n  //       }\n  //\n  //       const overrides = {\n  //         from: accounts[0],\n  //         gasLimit: 2900000,\n  //       };\n  //       const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n  //       await transaction.wait();\n  //       fetchData();\n  //     } catch (err) {\n  //       setError(err.message);\n  //     }\n  //   }\n  // }\n\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function setNftPrice(nftId, price) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n\n        // Ajoutez cette vérification\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000\n        };\n        const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"withdraw\",\n      onClick: withdraw,\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery\",\n        children: nftData.map(nft => /*#__PURE__*/_jsxDEV(NFTCard, {\n          nft: nft,\n          mintFunction: mint,\n          setPriceFunction: setNftPrice\n        }, nft.edition, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mint a Jox NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"count\",\n        children: [data.totalSupply, \"/\", data.maxSupply]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cost\",\n        children: [\"Jox Collection NFT cost \", Number(data.cost) / 10 ** 18, \" ETH (excluding gas fees)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 7\n  }, this);\n}\n_s2(App, \"2BGA2Z5gzNji+rNAX3sMIQu9KMI=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SetPriceForm\");\n$RefreshReg$(_c2, \"NFTCard\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","SmartContrat","dataNft","jsxDEV","_jsxDEV","smartcontratAdress","nftId","provider","providers","Web3Provider","window","ethereum","contract","Contract","abi","nftPrice","getNftPrice","console","log","utils","formatEther","SetPriceForm","_ref","_s","setPriceFunction","price","setPrice","handleSubmit","e","preventDefault","toString","onSubmit","children","type","step","min","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","NFTCard","_ref2","nft","mintFunction","className","name","src","image","replace","alt","onClick","edition","_c2","App","_s2","error","setError","data","setData","account","setAccount","nftData","setNftData","fetchData","getAccounts","accounts","request","method","err","message","cost","totalSupply","object","String","mint","signer","getSigner","overrides","from","parseEther","Number","gasLimit","transaction","wait","withdraw","setNftPrice","contractOwner","owner","toLowerCase","Error","map","maxSupply","_c3","$RefreshReg$"],"sources":["C:/Users/pierr/Documents/SiteNftMint/appnfts/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\n\nconst smartcontratAdress = '0x264f6dCaBCB0d510613b11Df4ab22ab76b25DFa3';\n\nconst nftId = 15; // L'identifiant du NFT dont vous voulez récupérer le prix\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\nconst nftPrice = await contract.getNftPrice(nftId);\nconsole.log(\"NFT price:\", ethers.utils.formatEther(nftPrice));\n// function SetPriceForm({ nftId, setPriceFunction }) {\n//   const [price, setPrice] = useState(0);\n//\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setPriceFunction(nftId, price);\n//   };\n//\n//   return (\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           Set price (in ETH):\n//           <input\n//               type=\"number\"\n//               step=\"0.01\"\n//               min=\"0\"\n//               value={price}\n//               onChange={(e) => setPrice(e.target.value)}\n//           />\n//         </label>\n//         <button type=\"submit\">Set Price</button>\n//       </form>\n//   );\n// }\nfunction SetPriceForm({ nftId, setPriceFunction }) {\n  const [price, setPrice] = useState(0);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setPriceFunction(nftId, price.toString());\n  };\n\n  return (\n      <form onSubmit={handleSubmit}>\n        <label>\n          Set price (in ETH):\n          <input\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Set Price</button>\n      </form>\n  );\n}\n\nfunction NFTCard({ nft, mintFunction, setPriceFunction }) {\n  return (\n      <div className=\"nft-card\">\n        <h2>{nft.name}</h2>\n        <img\n            className=\"nftImage\"\n            src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n            alt={nft.name}\n        />\n        <button onClick={() => mintFunction(nft.edition)}>\n          Mint NFT {nft.edition}\n        </button>\n        <SetPriceForm nftId={nft.edition} setPriceFunction={setPriceFunction} />\n        <button onClick={() => setPriceFunction(nft.edition, \"0.05\")}>\n          Set price to 0.05 ETH\n        </button>\n      </div>\n  );\n}\n\n\nfunction App() {\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n\n  async function getAccounts() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        setAccount(accounts);\n        console.log(accounts[0]);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function fetchData() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {cost: String(cost), totalSupply: String(totalSupply)};\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function mint(edition) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n          gasLimit: 9900000,\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  // async function setNftPrice(nftId, price) {\n  //   if (typeof window.ethereum !== 'undefined') {\n  //     try {\n  //       const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n  //       const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //       const signer = provider.getSigner();\n  //       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n  //\n  //       // Ajoutez cette vérification\n  //       const contractOwner = await contract.owner();\n  //       if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n  //         throw new Error(\"Only the contract owner can set the NFT price.\");\n  //       }\n  //\n  //       const overrides = {\n  //         from: accounts[0],\n  //         gasLimit: 2900000,\n  //       };\n  //       const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n  //       await transaction.wait();\n  //       fetchData();\n  //     } catch (err) {\n  //       setError(err.message);\n  //     }\n  //   }\n  // }\n\n\n\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function setNftPrice(nftId, price) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n\n        // Ajoutez cette vérification\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000,\n        };\n        const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n\n  return (\n      <div className=\"App\">\n        {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n            <button className=\"withdraw\" onClick={withdraw}>\n              Withdraw\n            </button>\n        )}\n        <div className=\"container\">\n          <div className=\"nft-gallery\">\n            {nftData.map((nft) => (\n                <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n              ))}\n          </div>\n          {error && <p>{error}</p>}\n          <h1>Mint a Jox NFT</h1>\n          <p className=\"count\">\n            {data.totalSupply}/{data.maxSupply}\n          </p>\n          <p className=\"cost\">\n            Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n          </p>\n        </div>\n      </div>\n  );\n}\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}