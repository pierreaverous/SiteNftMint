{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pierr\\\\Documents\\\\SiteNftMint\\\\appnfts\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n// import { ethers } from 'ethers';\n// import SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\n// import './App.css';\n// import dataNft from './_metadata.json';\n//\n// const smartcontratAdress = '0x6C0F01619fE0303419cB6158Cc3639418E4DDaF0';\n// async function setCost(newCost) {\n//   if (typeof window.ethereum !== 'undefined') {\n//     try {\n//       const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//       const overrides = {\n//         from: accounts[0],\n//         gasLimit: 2900000,\n//       };\n//       const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\n//       await transaction.wait();\n//       fetchData();\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//   }\n// }\n//\n// function NFTCard({ nft, mintFunction, setPriceFunction }) {\n//   return (\n//       <div className=\"nft-card\">\n//         <h2>{nft.name}</h2>\n//         <img\n//             className=\"nftImage\"\n//             src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n//             alt={nft.name}\n//         />\n//         <button onClick={() => mintFunction(nft.edition)}>\n//           Mint NFT {nft.edition}\n//         </button>\n//         <form onSubmit={(e) => {\n//           e.preventDefault();\n//           setCost(e.target.cost.value);\n//         }}>\n//           <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\n//           <button type=\"submit\">Set cost</button>\n//         </form>\n//       </div>\n//   );\n// }\n//\n//\n// function App() {\n//   const [error, setError] = useState('');\n//   const [data, setData] = useState({});\n//   const [account, setAccount] = useState([]);\n//   const [nftData, setNftData] = useState([]);\n//\n//   useEffect(() => {\n//     fetchData();\n//     getAccounts();\n//     setNftData(dataNft);\n//   }, []);\n//\n//   async function getAccounts() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         setAccount(accounts);\n//         console.log(accounts[0]);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function fetchData() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n//       try {\n//         const cost = await contract.cost();\n//         const totalSupply = await contract.totalSupply();\n//         const object = {cost: String(cost), totalSupply: String(totalSupply)};\n//         setData(object);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function mint(edition) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const overrides = {\n//           from: accounts[0],\n//           value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n//           gasLimit: 9900000,\n//         };\n//         const transaction = await contract.mint(accounts[0], edition, overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//   async function setNftPrice(nftId, price) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//\n//         // Ajoutez cette v√©rification\n//         const contractOwner = await contract.owner();\n//         if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n//           throw new Error(\"Only the contract owner can set the NFT price.\");\n//         }\n//\n//         const overrides = {\n//           from: accounts[0],\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   async function withdraw() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const transaction = await contract.withdraw();\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   return (\n//       <div className=\"App\">\n//         {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n//             <button className=\"withdraw\" onClick={withdraw}>\n//               Withdraw\n//             </button>\n//         )}\n//         <div className=\"container\">\n//           <div className=\"nft-gallery\">\n//             {nftData.map((nft) => (\n//                 <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n//\n//             ))}\n//           </div>\n//           {error && <p>{error}</p>}\n//           <h1>Mint a Jox NFT</h1>\n//           <p className=\"count\">\n//             {data.totalSupply}/{data.maxSupply}\n//           </p>\n//           <p className=\"cost\">\n//             Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n//           </p>\n//         </div>\n//       </div>\n//   );\n// }\n// export default App;\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst smartcontratAdress = '0x6C0F01619fE0303419cB6158Cc3639418E4DDaF0';\nconst App = () => {\n  _s();\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n  function NFTCard(_ref) {\n    let {\n      nft,\n      mintFunction,\n      setPriceFunction\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nft-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: nft.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"nftImage\",\n        src: nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\"),\n        alt: nft.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => mintFunction(nft.edition),\n        children: [\"Mint NFT \", nft.edition]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          setCost(e.target.cost.value);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          step: \"0.01\",\n          name: \"cost\",\n          placeholder: \"New cost\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Set cost\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this);\n  }\n  const fetchData = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {\n          cost: String(cost),\n          totalSupply: String(totalSupply)\n        };\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n  const getAccounts = async () => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts);\n        console.log(accounts[0]);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n  const mint = async edition => {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n          gasLimit: 9900000\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  };\n  async function setNftPrice(nftId, price) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n\n        // Ajoutez cette v√©rification\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000\n        };\n        const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"withdraw\",\n      onClick: withdraw,\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-gallery\",\n        children: nftData.map(nft => /*#__PURE__*/_jsxDEV(NFTCard, {\n          nft: nft,\n          mintFunction: mint,\n          setPriceFunction: setNftPrice\n        }, nft.edition, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Mint a Jox NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"count\",\n        children: [data.totalSupply, \"/\", data.maxSupply]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cost\",\n        children: [\"Jox Collection NFT cost \", Number(data.cost) / 10 ** 18, \" ETH (excluding gas fees)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"2BGA2Z5gzNji+rNAX3sMIQu9KMI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","SmartContrat","dataNft","jsxDEV","_jsxDEV","smartcontratAdress","App","_s","error","setError","data","setData","account","setAccount","nftData","setNftData","NFTCard","_ref","nft","mintFunction","setPriceFunction","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","src","image","replace","alt","onClick","edition","onSubmit","e","preventDefault","setCost","target","cost","value","type","step","placeholder","required","fetchData","window","ethereum","provider","providers","Web3Provider","contract","Contract","abi","totalSupply","object","String","err","message","getAccounts","accounts","request","method","console","log","mint","signer","getSigner","overrides","from","utils","parseEther","Number","gasLimit","transaction","wait","setNftPrice","nftId","price","contractOwner","owner","toLowerCase","Error","withdraw","map","maxSupply","_c","$RefreshReg$"],"sources":["C:/Users/pierr/Documents/SiteNftMint/appnfts/src/App.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\n// import { ethers } from 'ethers';\n// import SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\n// import './App.css';\n// import dataNft from './_metadata.json';\n//\n// const smartcontratAdress = '0x6C0F01619fE0303419cB6158Cc3639418E4DDaF0';\n// async function setCost(newCost) {\n//   if (typeof window.ethereum !== 'undefined') {\n//     try {\n//       const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//       const overrides = {\n//         from: accounts[0],\n//         gasLimit: 2900000,\n//       };\n//       const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\n//       await transaction.wait();\n//       fetchData();\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//   }\n// }\n//\n// function NFTCard({ nft, mintFunction, setPriceFunction }) {\n//   return (\n//       <div className=\"nft-card\">\n//         <h2>{nft.name}</h2>\n//         <img\n//             className=\"nftImage\"\n//             src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n//             alt={nft.name}\n//         />\n//         <button onClick={() => mintFunction(nft.edition)}>\n//           Mint NFT {nft.edition}\n//         </button>\n//         <form onSubmit={(e) => {\n//           e.preventDefault();\n//           setCost(e.target.cost.value);\n//         }}>\n//           <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\n//           <button type=\"submit\">Set cost</button>\n//         </form>\n//       </div>\n//   );\n// }\n//\n//\n// function App() {\n//   const [error, setError] = useState('');\n//   const [data, setData] = useState({});\n//   const [account, setAccount] = useState([]);\n//   const [nftData, setNftData] = useState([]);\n//\n//   useEffect(() => {\n//     fetchData();\n//     getAccounts();\n//     setNftData(dataNft);\n//   }, []);\n//\n//   async function getAccounts() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         setAccount(accounts);\n//         console.log(accounts[0]);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function fetchData() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n//       try {\n//         const cost = await contract.cost();\n//         const totalSupply = await contract.totalSupply();\n//         const object = {cost: String(cost), totalSupply: String(totalSupply)};\n//         setData(object);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function mint(edition) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const overrides = {\n//           from: accounts[0],\n//           value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n//           gasLimit: 9900000,\n//         };\n//         const transaction = await contract.mint(accounts[0], edition, overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//   async function setNftPrice(nftId, price) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//\n//         // Ajoutez cette v√©rification\n//         const contractOwner = await contract.owner();\n//         if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n//           throw new Error(\"Only the contract owner can set the NFT price.\");\n//         }\n//\n//         const overrides = {\n//           from: accounts[0],\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   async function withdraw() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const transaction = await contract.withdraw();\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   return (\n//       <div className=\"App\">\n//         {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n//             <button className=\"withdraw\" onClick={withdraw}>\n//               Withdraw\n//             </button>\n//         )}\n//         <div className=\"container\">\n//           <div className=\"nft-gallery\">\n//             {nftData.map((nft) => (\n//                 <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n//\n//             ))}\n//           </div>\n//           {error && <p>{error}</p>}\n//           <h1>Mint a Jox NFT</h1>\n//           <p className=\"count\">\n//             {data.totalSupply}/{data.maxSupply}\n//           </p>\n//           <p className=\"cost\">\n//             Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n//           </p>\n//         </div>\n//       </div>\n//   );\n// }\n// export default App;\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\n\nconst smartcontratAdress = '0x6C0F01619fE0303419cB6158Cc3639418E4DDaF0';\n\nconst App = () => {\n    const [error, setError] = useState('');\n    const [data, setData] = useState({});\n    const [account, setAccount] = useState([]);\n    const [nftData, setNftData] = useState([]);\n    function NFTCard({ nft, mintFunction, setPriceFunction }) {\n  return (\n      <div className=\"nft-card\">\n        <h2>{nft.name}</h2>\n        <img\n            className=\"nftImage\"\n            src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n            alt={nft.name}\n        />\n        <button onClick={() => mintFunction(nft.edition)}>\n          Mint NFT {nft.edition}\n        </button>\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          setCost(e.target.cost.value);\n        }}>\n          <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\n          <button type=\"submit\">Set cost</button>\n        </form>\n      </div>\n  );\n}\n    const fetchData = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n            try {\n                const cost = await contract.cost();\n                const totalSupply = await contract.totalSupply();\n                const object = {cost: String(cost), totalSupply: String(totalSupply)};\n                setData(object);\n            } catch (err) {\n                setError(err.message);\n            }\n        }\n    };\n\n    useEffect(() => {\n        fetchData();\n        getAccounts();\n        setNftData(dataNft);\n    }, []);\n\n    const getAccounts = async () => {\n        if (typeof window.ethereum !== 'undefined') {\n            try {\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n                setAccount(accounts);\n                console.log(accounts[0]);\n            } catch (err) {\n                setError(err.message);\n            }\n        }\n    };\n\n    const mint = async (edition) => {\n        if (typeof window.ethereum !== 'undefined') {\n            try {\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                const signer = provider.getSigner();\n                const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n                const overrides = {\n                    from: accounts[0],\n                    value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n                    gasLimit: 9900000,\n                };\n                const transaction = await contract.mint(accounts[0], edition, overrides);\n                await transaction.wait();\n                fetchData();\n            } catch (err) {\n                setError(err.message);\n            }\n        }\n    };\n\n    async function setNftPrice(nftId, price) {\n        if (typeof window.ethereum !== 'undefined') {\n            try {\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                const signer = provider.getSigner();\n                const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n\n                // Ajoutez cette v√©rification\n                const contractOwner = await contract.owner();\n                if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n                    throw new Error(\"Only the contract owner can set the NFT price.\");\n                }\n\n                const overrides = {\n                    from: accounts[0],\n                    gasLimit: 2900000,\n                };\n                const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n                await transaction.wait();\n                fetchData();\n            } catch (err) {\n                setError(err.message);\n            }\n        }\n    }\n\n    async function withdraw() {\n        if (typeof window.ethereum !== 'undefined') {\n            try {\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\n                const signer = provider.getSigner();\n                const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n                const transaction = await contract.withdraw();\n                await transaction.wait();\n                fetchData();\n            } catch (err) {\n                setError(err.message);\n            }\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n                <button className=\"withdraw\" onClick={withdraw}>\n                    Withdraw\n                </button>\n            )}\n            <div className=\"container\">\n                <div className=\"nft-gallery\">\n                    {nftData.map((nft) => (\n                        <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n                    ))}\n                </div>\n                {error && <p>{error}</p>}\n                <h1>Mint a Jox NFT</h1>\n                <p className=\"count\">\n                    {data.totalSupply}/{data.maxSupply}\n                </p>\n                <p className=\"cost\">\n                    Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n                </p>\n            </div>\n        </div>\n    );\n}\nexport default App\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}