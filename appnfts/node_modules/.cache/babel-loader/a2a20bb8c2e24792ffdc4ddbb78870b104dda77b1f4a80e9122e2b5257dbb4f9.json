{"ast":null,"code":"// import { useEffect, useState } from 'react';\n// import { ethers } from 'ethers';\n// import SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\n// import './App.css';\n// import dataNft from './_metadata.json';\n//\n// const smartcontratAdress = '0x6C0F01619fE0303419cB6158Cc3639418E4DDaF0';\n// async function setCost(newCost) {\n//   if (typeof window.ethereum !== 'undefined') {\n//     try {\n//       const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//       const overrides = {\n//         from: accounts[0],\n//         gasLimit: 2900000,\n//       };\n//       const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\n//       await transaction.wait();\n//       fetchData();\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//   }\n// }\n//\n// function NFTCard({ nft, mintFunction, setPriceFunction }) {\n//   return (\n//       <div className=\"nft-card\">\n//         <h2>{nft.name}</h2>\n//         <img\n//             className=\"nftImage\"\n//             src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n//             alt={nft.name}\n//         />\n//         <button onClick={() => mintFunction(nft.edition)}>\n//           Mint NFT {nft.edition}\n//         </button>\n//         <form onSubmit={(e) => {\n//           e.preventDefault();\n//           setCost(e.target.cost.value);\n//         }}>\n//           <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\n//           <button type=\"submit\">Set cost</button>\n//         </form>\n//       </div>\n//   );\n// }\n//\n//\n// function App() {\n//   const [error, setError] = useState('');\n//   const [data, setData] = useState({});\n//   const [account, setAccount] = useState([]);\n//   const [nftData, setNftData] = useState([]);\n//\n//   useEffect(() => {\n//     fetchData();\n//     getAccounts();\n//     setNftData(dataNft);\n//   }, []);\n//\n//   async function getAccounts() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         setAccount(accounts);\n//         console.log(accounts[0]);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function fetchData() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n//       try {\n//         const cost = await contract.cost();\n//         const totalSupply = await contract.totalSupply();\n//         const object = {cost: String(cost), totalSupply: String(totalSupply)};\n//         setData(object);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function mint(edition) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const overrides = {\n//           from: accounts[0],\n//           value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n//           gasLimit: 9900000,\n//         };\n//         const transaction = await contract.mint(accounts[0], edition, overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//   async function setNftPrice(nftId, price) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//\n//         // Ajoutez cette v√©rification\n//         const contractOwner = await contract.owner();\n//         if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n//           throw new Error(\"Only the contract owner can set the NFT price.\");\n//         }\n//\n//         const overrides = {\n//           from: accounts[0],\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   async function withdraw() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const transaction = await contract.withdraw();\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   return (\n//       <div className=\"App\">\n//         {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n//             <button className=\"withdraw\" onClick={withdraw}>\n//               Withdraw\n//             </button>\n//         )}\n//         <div className=\"container\">\n//           <div className=\"nft-gallery\">\n//             {nftData.map((nft) => (\n//                 <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n//\n//             ))}\n//           </div>\n//           {error && <p>{error}</p>}\n//           <h1>Mint a Jox NFT</h1>\n//           <p className=\"count\">\n//             {data.totalSupply}/{data.maxSupply}\n//           </p>\n//           <p className=\"cost\">\n//             Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n//           </p>\n//         </div>\n//       </div>\n//   );\n// }\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/pierr/Documents/SiteNftMint/appnfts/src/App.js"],"sourcesContent":["// import { useEffect, useState } from 'react';\n// import { ethers } from 'ethers';\n// import SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\n// import './App.css';\n// import dataNft from './_metadata.json';\n//\n// const smartcontratAdress = '0x6C0F01619fE0303419cB6158Cc3639418E4DDaF0';\n// async function setCost(newCost) {\n//   if (typeof window.ethereum !== 'undefined') {\n//     try {\n//       const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const signer = provider.getSigner();\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//       const overrides = {\n//         from: accounts[0],\n//         gasLimit: 2900000,\n//       };\n//       const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\n//       await transaction.wait();\n//       fetchData();\n//     } catch (err) {\n//       setError(err.message);\n//     }\n//   }\n// }\n//\n// function NFTCard({ nft, mintFunction, setPriceFunction }) {\n//   return (\n//       <div className=\"nft-card\">\n//         <h2>{nft.name}</h2>\n//         <img\n//             className=\"nftImage\"\n//             src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n//             alt={nft.name}\n//         />\n//         <button onClick={() => mintFunction(nft.edition)}>\n//           Mint NFT {nft.edition}\n//         </button>\n//         <form onSubmit={(e) => {\n//           e.preventDefault();\n//           setCost(e.target.cost.value);\n//         }}>\n//           <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\n//           <button type=\"submit\">Set cost</button>\n//         </form>\n//       </div>\n//   );\n// }\n//\n//\n// function App() {\n//   const [error, setError] = useState('');\n//   const [data, setData] = useState({});\n//   const [account, setAccount] = useState([]);\n//   const [nftData, setNftData] = useState([]);\n//\n//   useEffect(() => {\n//     fetchData();\n//     getAccounts();\n//     setNftData(dataNft);\n//   }, []);\n//\n//   async function getAccounts() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         setAccount(accounts);\n//         console.log(accounts[0]);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function fetchData() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       const provider = new ethers.providers.Web3Provider(window.ethereum);\n//       const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n//       try {\n//         const cost = await contract.cost();\n//         const totalSupply = await contract.totalSupply();\n//         const object = {cost: String(cost), totalSupply: String(totalSupply)};\n//         setData(object);\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//   async function mint(edition) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const overrides = {\n//           from: accounts[0],\n//           value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n//           gasLimit: 9900000,\n//         };\n//         const transaction = await contract.mint(accounts[0], edition, overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//   async function setNftPrice(nftId, price) {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//\n//         // Ajoutez cette v√©rification\n//         const contractOwner = await contract.owner();\n//         if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n//           throw new Error(\"Only the contract owner can set the NFT price.\");\n//         }\n//\n//         const overrides = {\n//           from: accounts[0],\n//           gasLimit: 2900000,\n//         };\n//         const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   async function withdraw() {\n//     if (typeof window.ethereum !== 'undefined') {\n//       try {\n//         const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n//         const provider = new ethers.providers.Web3Provider(window.ethereum);\n//         const signer = provider.getSigner();\n//         const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n//         const transaction = await contract.withdraw();\n//         await transaction.wait();\n//         fetchData();\n//       } catch (err) {\n//         setError(err.message);\n//       }\n//     }\n//   }\n//\n//\n//   return (\n//       <div className=\"App\">\n//         {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n//             <button className=\"withdraw\" onClick={withdraw}>\n//               Withdraw\n//             </button>\n//         )}\n//         <div className=\"container\">\n//           <div className=\"nft-gallery\">\n//             {nftData.map((nft) => (\n//                 <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n//\n//             ))}\n//           </div>\n//           {error && <p>{error}</p>}\n//           <h1>Mint a Jox NFT</h1>\n//           <p className=\"count\">\n//             {data.totalSupply}/{data.maxSupply}\n//           </p>\n//           <p className=\"cost\">\n//             Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n//           </p>\n//         </div>\n//       </div>\n//   );\n// }\n// export default App;\n\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}