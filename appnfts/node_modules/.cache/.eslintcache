[{"C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\index.js":"1","C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\App.js":"2","C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\reportWebVitals.js":"3","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\index.js":"4","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\App.js":"5","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\reportWebVitals.js":"6"},{"size":535,"mtime":1679240160271,"results":"7","hashOfConfig":"8"},{"size":5703,"mtime":1679242482958,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1678573389242,"results":"10","hashOfConfig":"8"},{"size":535,"mtime":1679240160271,"results":"11","hashOfConfig":"12"},{"size":14076,"mtime":1679666405388,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1678573389242,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ig52en",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u0spqs",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\index.js",[],[],"C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\App.js",["34"],[],"import { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\n\nconst smartcontratAdress = '0x0374EfB7E10b9528664B2D9584514360c4dAc318';\nfunction SetPriceForm({ nftId, setPriceFunction }) {\n  const [price, setPrice] = useState(0);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setPriceFunction(nftId, price);\n  };\n\n  return (\n      <form onSubmit={handleSubmit}>\n        <label>\n          Set price (in ETH):\n          <input\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Set Price</button>\n      </form>\n  );\n}\n\nfunction NFTCard({ nft, mintFunction, setPriceFunction }) {\n  return (\n      <div className=\"nft-card\">\n        <h2>{nft.name}</h2>\n        <img\n            className=\"nftImage\"\n            src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n            alt={nft.name}\n        />\n        <button onClick={() => mintFunction(nft.edition)}>\n          Mint NFT {nft.edition}\n        </button>\n        <SetPriceForm nftId={nft.edition} setPriceFunction={setPriceFunction} />\n      </div>\n  );\n}\n\n\nfunction App() {\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n\n  async function getAccounts() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        setAccount(accounts);\n        console.log(accounts[0]);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function fetchData() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {cost: String(cost), totalSupply: String(totalSupply)};\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function mint(edition) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n          gasLimit: 9900000,\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function setNftPrice(nftId, price) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n\n        // Ajoutez cette v√©rification\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000,\n        };\n        const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n\n  return (\n      <div className=\"App\">\n        {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n            <button className=\"withdraw\" onClick={withdraw}>\n              Withdraw\n            </button>\n        )}\n        <div className=\"container\">\n          <div className=\"nft-gallery\">\n            {nftData.map((nft) => (\n                <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n            ))}\n          </div>\n          {error && <p>{error}</p>}\n          <h1>Mint a Jox NFT</h1>\n          <p className=\"count\">\n            {data.totalSupply}/{data.maxSupply}\n          </p>\n          <p className=\"cost\">\n            Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n          </p>\n        </div>\n      </div>\n  );\n}\nexport default App;","C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\reportWebVitals.js",[],[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\index.js",[],[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\App.js",["35","36"],[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\reportWebVitals.js",[],[],{"ruleId":"37","severity":1,"message":"38","line":141,"column":15,"nodeType":"39","messageId":"40","endLine":141,"endColumn":23},{"ruleId":"37","severity":1,"message":"38","line":194,"column":13,"nodeType":"39","messageId":"40","endLine":194,"endColumn":21},{"ruleId":"37","severity":1,"message":"38","line":369,"column":15,"nodeType":"39","messageId":"40","endLine":369,"endColumn":23},"no-unused-vars","'accounts' is assigned a value but never used.","Identifier","unusedVar"]