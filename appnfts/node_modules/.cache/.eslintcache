[{"C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\index.js":"1","C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\App.js":"2","C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\reportWebVitals.js":"3","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\index.js":"4","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\App.js":"5","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\reportWebVitals.js":"6","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\Router.jsx":"7","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\PageCollection2.js":"8","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\PageCollection3.js":"9","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\PageCollection4.js":"10","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\PageCollection5.js":"11"},{"size":535,"mtime":1679240160271,"results":"12","hashOfConfig":"13"},{"size":5703,"mtime":1679242482958,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1678573389242,"results":"15","hashOfConfig":"13"},{"size":569,"mtime":1679748262126,"results":"16","hashOfConfig":"17"},{"size":6965,"mtime":1679766093617,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1678573389242,"results":"19","hashOfConfig":"17"},{"size":963,"mtime":1679766093639,"results":"20","hashOfConfig":"17"},{"size":7781,"mtime":1679754258602,"results":"21","hashOfConfig":"17"},{"size":7783,"mtime":1679763428415,"results":"22","hashOfConfig":"17"},{"size":7784,"mtime":1679765413535,"results":"23","hashOfConfig":"17"},{"size":7784,"mtime":1679766408452,"results":"24","hashOfConfig":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ig52en",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"u0spqs",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\index.js",[],[],"C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\App.js",["64"],[],"import { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\nimport './App.css';\nimport dataNft from './_metadata.json';\n\nconst smartcontratAdress = '0x0374EfB7E10b9528664B2D9584514360c4dAc318';\nfunction SetPriceForm({ nftId, setPriceFunction }) {\n  const [price, setPrice] = useState(0);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setPriceFunction(nftId, price);\n  };\n\n  return (\n      <form onSubmit={handleSubmit}>\n        <label>\n          Set price (in ETH):\n          <input\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n          />\n        </label>\n        <button type=\"submit\">Set Price</button>\n      </form>\n  );\n}\n\nfunction NFTCard({ nft, mintFunction, setPriceFunction }) {\n  return (\n      <div className=\"nft-card\">\n        <h2>{nft.name}</h2>\n        <img\n            className=\"nftImage\"\n            src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\n            alt={nft.name}\n        />\n        <button onClick={() => mintFunction(nft.edition)}>\n          Mint NFT {nft.edition}\n        </button>\n        <SetPriceForm nftId={nft.edition} setPriceFunction={setPriceFunction} />\n      </div>\n  );\n}\n\n\nfunction App() {\n  const [error, setError] = useState('');\n  const [data, setData] = useState({});\n  const [account, setAccount] = useState([]);\n  const [nftData, setNftData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n    getAccounts();\n    setNftData(dataNft);\n  }, []);\n\n  async function getAccounts() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        setAccount(accounts);\n        console.log(accounts[0]);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function fetchData() {\n    if (typeof window.ethereum !== 'undefined') {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\n      try {\n        const cost = await contract.cost();\n        const totalSupply = await contract.totalSupply();\n        const object = {cost: String(cost), totalSupply: String(totalSupply)};\n        setData(object);\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function mint(edition) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const overrides = {\n          from: accounts[0],\n          value: ethers.utils.parseEther(String(Number(data.cost) / 10 ** 18)),\n          gasLimit: 9900000,\n        };\n        const transaction = await contract.mint(accounts[0], edition, overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n  async function setNftPrice(nftId, price) {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n\n        // Ajoutez cette v√©rification\n        const contractOwner = await contract.owner();\n        if (accounts[0].toLowerCase() !== contractOwner.toLowerCase()) {\n          throw new Error(\"Only the contract owner can set the NFT price.\");\n        }\n\n        const overrides = {\n          from: accounts[0],\n          gasLimit: 2900000,\n        };\n        const transaction = await contract.setNftPrice(nftId, ethers.utils.parseEther(price), overrides);\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n\n  async function withdraw() {\n    if (typeof window.ethereum !== 'undefined') {\n      try {\n        const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\n        const transaction = await contract.withdraw();\n        await transaction.wait();\n        fetchData();\n      } catch (err) {\n        setError(err.message);\n      }\n    }\n  }\n\n\n  return (\n      <div className=\"App\">\n        {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\n            <button className=\"withdraw\" onClick={withdraw}>\n              Withdraw\n            </button>\n        )}\n        <div className=\"container\">\n          <div className=\"nft-gallery\">\n            {nftData.map((nft) => (\n                <NFTCard key={nft.edition} nft={nft} mintFunction={mint} setPriceFunction={setNftPrice}/>\n            ))}\n          </div>\n          {error && <p>{error}</p>}\n          <h1>Mint a Jox NFT</h1>\n          <p className=\"count\">\n            {data.totalSupply}/{data.maxSupply}\n          </p>\n          <p className=\"cost\">\n            Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\n          </p>\n        </div>\n      </div>\n  );\n}\nexport default App;","C:\\Users\\pierr\\Documents\\Nfts\\appnfts\\src\\reportWebVitals.js",[],[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\index.js",["65"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Router from \"./Router\";\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Router/>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\App.js",["66","67"],[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\reportWebVitals.js",[],[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\Router.jsx",[],[],[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\PageCollection2.js",["68","69"],[],"\r\nimport { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\r\nimport './App.css';\r\nimport dataNft from '../src/JSON/CollectionLEAUMetaDonn√©s.json';\r\n\r\n\r\nconst smartcontratAdress = '0xDCea9f815d2E0Da171ba3f883212eeAc6aBDD0C2';\r\nconst setNftSpecificPrice = async (edition, newPrice, fetchData, setError) => {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n        try {\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\r\n            const transaction = await contract.setNftSpecificPrice(edition, ethers.utils.parseEther(newPrice));\r\n            await transaction.wait();\r\n            fetchData();\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    }\r\n};\r\n\r\nconst setCost = async (newCost, fetchData, setError) => {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n        try {\r\n            const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\r\n            const overrides = {\r\n                from: accounts[0],\r\n                gasLimit: 2900000,\r\n            };\r\n            const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\r\n            await transaction.wait();\r\n            fetchData();\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    }\r\n};\r\n\r\nconst NFTCard = ({ nft, mintFunction, setPriceFunction, fetchData, setError }) => {\r\n\r\n    return (\r\n        <div className=\"nft-card\">\r\n            <h2>{nft.name}</h2>\r\n            <img\r\n                className=\"nftImage\"\r\n                src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\r\n                alt={nft.name}\r\n            />\r\n            <button onClick={() => mintFunction(nft.edition)}>\r\n                Mint NFT {nft.edition}\r\n            </button>\r\n            <form\r\n                onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    setNftSpecificPrice(nft.edition, e.target.newPrice.value, fetchData, setError);\r\n                }}\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    step=\"0.01\"\r\n                    name=\"newPrice\"\r\n                    placeholder=\"New specific price\"\r\n                    required\r\n                />\r\n                <button type=\"submit\">Set specific price</button>\r\n            </form>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst PageCollection2 = () => {\r\n    const [error, setError] = useState('');\r\n    const [data, setData] = useState({});\r\n    const [account, setAccount] = useState([]);\r\n    const [nftData, setNftData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n        getAccounts();\r\n        setNftData(dataNft);\r\n    }, []);\r\n\r\n    const getAccounts = async () => {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            try {\r\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n                setAccount(accounts);\r\n                console.log(accounts[0]);\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    };\r\n\r\n    const fetchData = async () => {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\r\n            try {\r\n                const cost = await contract.cost();\r\n                const totalSupply = await contract.totalSupply();\r\n                const object = {cost: String(cost), totalSupply: String(totalSupply)};\r\n                setData(object);\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    };\r\n    async function mint(edition) {\r\n        if (typeof window.ethereum !== \"undefined\") {\r\n            try {\r\n                const accounts = await window.ethereum.request({\r\n                    method: \"eth_requestAccounts\",\r\n                });\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n                const contract = new ethers.Contract(\r\n                    smartcontratAdress,\r\n                    SmartContrat.abi,\r\n                    signer\r\n                );\r\n\r\n                // R√©cup√©rez le prix sp√©cifique de l'√©dition NFT\r\n                const specificPrice = await contract.nftPrices(edition);\r\n                const priceToUse = specificPrice.gt(0) ? specificPrice : data.cost;\r\n\r\n                const overrides = {\r\n                    from: accounts[0],\r\n                    value: priceToUse,\r\n                    gasLimit: 9900000,\r\n                };\r\n                const transaction = await contract.mint(accounts[0], edition, overrides);\r\n\r\n                await transaction.wait();\r\n                fetchData();\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function withdraw() {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            try {\r\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n                const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\r\n                const transaction = await contract.withdraw();\r\n                await transaction.wait();\r\n                fetchData();\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\r\n                <button className=\"withdraw\" onClick={withdraw}>\r\n                    Withdraw\r\n                </button>\r\n            )}\r\n            <div className=\"container\">\r\n                <div className=\"nft-gallery\">\r\n                    {nftData.map((nft) => (\r\n                        <NFTCard key={nft.edition}\r\n                                 nft={nft}\r\n                                 mintFunction={mint}\r\n                                 fetchData={fetchData}\r\n                                 setError={setError}/>\r\n                    ))}\r\n                </div>\r\n                {error && <p>{error}</p>}\r\n                <h1>Mint a Jox NFT</h1>\r\n                <p className=\"count\">\r\n                    {data.totalSupply}/{data.maxSupply}\r\n                </p>\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    setCost(e.target.cost.value, fetchData, setError);\r\n                }}>\r\n                    <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\r\n                    <button type=\"submit\">Set cost</button>\r\n                </form>\r\n                <p className=\"cost\">\r\n                    Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default PageCollection2;\r\n","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\PageCollection3.js",["70","71"],[],"\r\nimport { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport SmartContrat from './artifacts/contracts/SmartContrat.sol/SmartContrat.json';\r\nimport './App.css';\r\nimport dataNft from '../src/JSON/CollectionIngwasMetadonn√©s.json';\r\n\r\n\r\nconst smartcontratAdress = '0x6C2C232e7cBcC604e5B0C4f859B36858F5751aCF';\r\nconst setNftSpecificPrice = async (edition, newPrice, fetchData, setError) => {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n        try {\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\r\n            const transaction = await contract.setNftSpecificPrice(edition, ethers.utils.parseEther(newPrice));\r\n            await transaction.wait();\r\n            fetchData();\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    }\r\n};\r\n\r\nconst setCost = async (newCost, fetchData, setError) => {\r\n    if (typeof window.ethereum !== 'undefined') {\r\n        try {\r\n            const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\r\n            const overrides = {\r\n                from: accounts[0],\r\n                gasLimit: 2900000,\r\n            };\r\n            const transaction = await contract.setCost(ethers.utils.parseEther(newCost), overrides);\r\n            await transaction.wait();\r\n            fetchData();\r\n        } catch (err) {\r\n            setError(err.message);\r\n        }\r\n    }\r\n};\r\n\r\nconst NFTCard = ({ nft, mintFunction, setPriceFunction, fetchData, setError }) => {\r\n\r\n    return (\r\n        <div className=\"nft-card\">\r\n            <h2>{nft.name}</h2>\r\n            <img\r\n                className=\"nftImage\"\r\n                src={nft.image.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\")}\r\n                alt={nft.name}\r\n            />\r\n            <button onClick={() => mintFunction(nft.edition)}>\r\n                Mint NFT {nft.edition}\r\n            </button>\r\n            <form\r\n                onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    setNftSpecificPrice(nft.edition, e.target.newPrice.value, fetchData, setError);\r\n                }}\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    step=\"0.01\"\r\n                    name=\"newPrice\"\r\n                    placeholder=\"New specific price\"\r\n                    required\r\n                />\r\n                <button type=\"submit\">Set specific price</button>\r\n            </form>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst PageCollection3 = () => {\r\n    const [error, setError] = useState('');\r\n    const [data, setData] = useState({});\r\n    const [account, setAccount] = useState([]);\r\n    const [nftData, setNftData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n        getAccounts();\r\n        setNftData(dataNft);\r\n    }, []);\r\n\r\n    const getAccounts = async () => {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            try {\r\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n                setAccount(accounts);\r\n                console.log(accounts[0]);\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    };\r\n\r\n    const fetchData = async () => {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n            const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, provider);\r\n            try {\r\n                const cost = await contract.cost();\r\n                const totalSupply = await contract.totalSupply();\r\n                const object = {cost: String(cost), totalSupply: String(totalSupply)};\r\n                setData(object);\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    };\r\n    async function mint(edition) {\r\n        if (typeof window.ethereum !== \"undefined\") {\r\n            try {\r\n                const accounts = await window.ethereum.request({\r\n                    method: \"eth_requestAccounts\",\r\n                });\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n                const contract = new ethers.Contract(\r\n                    smartcontratAdress,\r\n                    SmartContrat.abi,\r\n                    signer\r\n                );\r\n\r\n                // R√©cup√©rez le prix sp√©cifique de l'√©dition NFT\r\n                const specificPrice = await contract.nftPrices(edition);\r\n                const priceToUse = specificPrice.gt(0) ? specificPrice : data.cost;\r\n\r\n                const overrides = {\r\n                    from: accounts[0],\r\n                    value: priceToUse,\r\n                    gasLimit: 9900000,\r\n                };\r\n                const transaction = await contract.mint(accounts[0], edition, overrides);\r\n\r\n                await transaction.wait();\r\n                fetchData();\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function withdraw() {\r\n        if (typeof window.ethereum !== 'undefined') {\r\n            try {\r\n                const accounts = await window.ethereum.request({method: 'eth_requestAccounts'});\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                const signer = provider.getSigner();\r\n                const contract = new ethers.Contract(smartcontratAdress, SmartContrat.abi, signer);\r\n                const transaction = await contract.withdraw();\r\n                await transaction.wait();\r\n                fetchData();\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            {account[0] === \"0x0ca22262c953bf13f89be2e1ff1742f9d227b18c\" && (\r\n                <button className=\"withdraw\" onClick={withdraw}>\r\n                    Withdraw\r\n                </button>\r\n            )}\r\n            <div className=\"container\">\r\n                <div className=\"nft-gallery\">\r\n                    {nftData.map((nft) => (\r\n                        <NFTCard key={nft.edition}\r\n                                 nft={nft}\r\n                                 mintFunction={mint}\r\n                                 fetchData={fetchData}\r\n                                 setError={setError}/>\r\n                    ))}\r\n                </div>\r\n                {error && <p>{error}</p>}\r\n                <h1>Mint a Jox NFT</h1>\r\n                <p className=\"count\">\r\n                    {data.totalSupply}/{data.maxSupply}\r\n                </p>\r\n                <form onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    setCost(e.target.cost.value, fetchData, setError);\r\n                }}>\r\n                    <input type=\"number\" step=\"0.01\" name=\"cost\" placeholder=\"New cost\" required />\r\n                    <button type=\"submit\">Set cost</button>\r\n                </form>\r\n                <p className=\"cost\">\r\n                    Jox Collection NFT cost {Number(data.cost) / 10 ** 18} ETH (excluding gas fees)\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default PageCollection3;\r\n","C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\PageCollection4.js",["72","73"],[],"C:\\Users\\pierr\\Documents\\SiteNftMint\\appnfts\\src\\PageCollection5.js",["74","75"],[],{"ruleId":"76","severity":1,"message":"77","line":141,"column":15,"nodeType":"78","messageId":"79","endLine":141,"endColumn":23},{"ruleId":"76","severity":1,"message":"80","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":11},{"ruleId":"76","severity":1,"message":"77","line":15,"column":13,"nodeType":"78","messageId":"79","endLine":15,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":157,"column":15,"nodeType":"78","messageId":"79","endLine":157,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":13,"column":19,"nodeType":"78","messageId":"79","endLine":13,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":155,"column":23,"nodeType":"78","messageId":"79","endLine":155,"endColumn":31},{"ruleId":"76","severity":1,"message":"77","line":13,"column":19,"nodeType":"78","messageId":"79","endLine":13,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":155,"column":23,"nodeType":"78","messageId":"79","endLine":155,"endColumn":31},{"ruleId":"76","severity":1,"message":"77","line":13,"column":19,"nodeType":"78","messageId":"79","endLine":13,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":155,"column":23,"nodeType":"78","messageId":"79","endLine":155,"endColumn":31},{"ruleId":"76","severity":1,"message":"77","line":13,"column":19,"nodeType":"78","messageId":"79","endLine":13,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":155,"column":23,"nodeType":"78","messageId":"79","endLine":155,"endColumn":31},"no-unused-vars","'accounts' is assigned a value but never used.","Identifier","unusedVar","'App' is defined but never used."]